---
apiVersion: s3.stackable.tech/v1alpha1
kind: S3Connection
metadata:
  name: minio
spec:
  host: 192.168.6.157
  port: 9092
  accessStyle: Path
  credentials:
    secretClass: hive-s3-secret-class
---
apiVersion: v1
kind: Secret
metadata:
  name: hive-s3-secret
  labels:
    secrets.stackable.tech/class: hive-s3-secret-class
stringData:
  accessKey: minioadmin
  secretKey: minioadmin
---
apiVersion: secrets.stackable.tech/v1alpha1
kind: SecretClass
metadata:
  name: hive-s3-secret-class
spec:
  backend:
    k8sSearch:
      searchNamespace:
        pod: {}
---
apiVersion: v1
kind: Secret
metadata:
  name: secret-provisioner-keytab
type: Opaque
data:
  keytab: BQIAAABJAAIABldIRy5DTgAFYWRtaW4ABWFkbWluAAAAAWaFTeACABQAIE7RgbL+35gACkQ3pqjo7br/Iw65I/N22TeAZTZfey0HAAAAAgAAADkAAgAGV0hHLkNOAAVhZG1pbgAFYWRtaW4AAAABZoVN4AIAEwAQbF0qBIzv9rg0Mr3xbfh6OAAAAAIAAABJAAIABldIRy5DTgAFYWRtaW4ABWFkbWluAAAAAWaFTeACABIAIKq3PzSuqEBm0TIDiphnNRoJ6ofzWjW5xVGketlv0pobAAAAAgAAADkAAgAGV0hHLkNOAAVhZG1pbgAFYWRtaW4AAAABZoVN4AIAEQAQgmZcD+dE+ifkKW2wXqm5QQAAAAIAAABJAAIABldIRy5DTgAFYWRtaW4ABWFkbWluAAAAAWaFTeACABoAIJYfRZErMzk2R8gnStLnE6MCNUq1XrUM/Q7dkaAIKzrPAAAAAgAAADkAAgAGV0hHLkNOAAVhZG1pbgAFYWRtaW4AAAABZoVN4AIAGQAQ4BEpLHxf3z5dskzJENgh1gAAAAIAAAA5AAIABldIRy5DTgAFYWRtaW4ABWFkbWluAAAAAWaFTeACABcAEJvcYdtaP87W2C1JJ58fBDAAAAAC
---
apiVersion: secrets.stackable.tech/v1alpha1
kind: SecretClass
metadata:
  name: kerberos
spec:
  backend: 
    kerberosKeytab:
      realmName: WHG.CN
      kdc: kerberos.whg.cn
      admin:
        mit:
          kadminServer: kerberos.whg.cn
      adminKeytabSecret:
        namespace: default
        name: secret-provisioner-keytab
      adminPrincipal: admin/admin@WHG.CN
---
apiVersion: hive.stackable.tech/v1alpha1
kind: HiveCluster
metadata:
  name: hive-s3
spec:
  image:
    productVersion: 3.1.3
  clusterConfig:
    authentication:
      kerberos:
        secretClass: kerberos # Put your SecretClass name in here
    database:
      connString: jdbc:postgresql://192.168.6.157:5432/hive
      user: postgres
      password: "123456"
      dbType: postgres
    s3:
      reference: minio
  metastore:
    roleGroups:
      default:
        replicas: 1    
    configOverrides:
      core-site.xml:
        # The idea is that the user "hive" can't do anything in hdfs, *but* it can impersonate other users
        # (such as access-hive), that have the needed permissions.
        hadoop.user.group.static.mapping.overrides: "dr.who=;nn=;nm=;jn=;testuser=supergroup;hive=hive;access-hive=;"
        hadoop.proxyuser.trino.users: "*"
        hadoop.proxyuser.trino.hosts: "*"
---
apiVersion: trino.stackable.tech/v1alpha1
kind: TrinoCluster
metadata:
  name: simple-trino
spec:
  image:
    productVersion: "442"
  clusterConfig:
    catalogLabelSelector:
      matchLabels:
        trino: simple-trino
    listenerClass: external-unstable
  coordinators:
    roleGroups:
      default:
        replicas: 1
  workers:
    roleGroups:
      default:
        replicas: 1

---
apiVersion: trino.stackable.tech/v1alpha1
kind: TrinoCatalog
metadata:
  name: hive-catalog
  labels:
    trino: simple-trino
spec:
  connector:
    hive:
      metastore:
        configMap: hive-s3
      s3:
        reference: minio
  configOverrides:
    hive.metastore.username: trino